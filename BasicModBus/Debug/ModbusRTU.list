
ModbusRTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003578  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003730  08003730  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003738  08003738  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000000c  0800374c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  0800374c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2cc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8d  00000000  00000000  0002e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00030ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016c9  00000000  00000000  000316a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db69  00000000  00000000  00032d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab61  00000000  00000000  000408d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003430  00000000  00000000  000cb484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080036f8 	.word	0x080036f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080036f8 	.word	0x080036f8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb74 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f80c 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f966 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f93c 	bl	8000768 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f910 	bl	8000714 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80004f4:	f000 f8ba 	bl	800066c <MX_TIM11_Init>
  MX_TIM3_Init();
 80004f8:	f000 f86a 	bl	80005d0 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x20>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 f8ea 	bl	80036e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <SystemClock_Config+0xc8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <SystemClock_Config+0xc8>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <SystemClock_Config+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a20      	ldr	r2, [pc, #128]	; (80005cc <SystemClock_Config+0xcc>)
 800054a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <SystemClock_Config+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000560:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000570:	2304      	movs	r3, #4
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f001 f92d 	bl	80017e4 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000590:	f000 f980 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2103      	movs	r1, #3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fb8f 	bl	8001cd4 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005bc:	f000 f96a 	bl	8000894 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_TIM3_Init+0x94>)
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <MX_TIM3_Init+0x98>)
 80005f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_TIM3_Init+0x94>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_TIM3_Init+0x94>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_TIM3_Init+0x94>)
 8000600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000604:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_TIM3_Init+0x94>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_TIM3_Init+0x94>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_TIM3_Init+0x94>)
 8000614:	f001 fd7e 	bl	8002114 <HAL_TIM_Base_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800061e:	f000 f939 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4619      	mov	r1, r3
 800062e:	480d      	ldr	r0, [pc, #52]	; (8000664 <MX_TIM3_Init+0x94>)
 8000630:	f002 f81e 	bl	8002670 <HAL_TIM_ConfigClockSource>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800063a:	f000 f92b 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800063e:	2320      	movs	r3, #32
 8000640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <MX_TIM3_Init+0x94>)
 800064c:	f002 fc3a 	bl	8002ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000656:	f000 f91d 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028
 8000668:	40000400 	.word	0x40000400

0800066c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_TIM11_Init+0xa0>)
 8000686:	4a22      	ldr	r2, [pc, #136]	; (8000710 <MX_TIM11_Init+0xa4>)
 8000688:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_TIM11_Init+0xa0>)
 800068c:	2263      	movs	r2, #99	; 0x63
 800068e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_TIM11_Init+0xa0>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2580;
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_TIM11_Init+0xa0>)
 8000698:	f640 2214 	movw	r2, #2580	; 0xa14
 800069c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_TIM11_Init+0xa0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_TIM11_Init+0xa0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80006aa:	4818      	ldr	r0, [pc, #96]	; (800070c <MX_TIM11_Init+0xa0>)
 80006ac:	f001 fd32 	bl	8002114 <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 f8ed 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_TIM11_Init+0xa0>)
 80006bc:	f001 fd86 	bl	80021cc <HAL_TIM_OC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80006c6:	f000 f8e5 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80006ca:	2108      	movs	r1, #8
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <MX_TIM11_Init+0xa0>)
 80006ce:	f001 fde3 	bl	8002298 <HAL_TIM_OnePulse_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 f8dc 	bl	8000894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80006dc:	2310      	movs	r3, #16
 80006de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1435;
 80006e0:	f240 539b 	movw	r3, #1435	; 0x59b
 80006e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_TIM11_Init+0xa0>)
 80006f6:	f001 ff5f 	bl	80025b8 <HAL_TIM_OC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8000700:	f000 f8c8 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000dc 	.word	0x200000dc
 8000710:	40014800 	.word	0x40014800

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000738:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073c:	220c      	movs	r2, #12
 800073e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074e:	f002 fc45 	bl	8002fdc <HAL_UART_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000758:	f000 f89c 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000190 	.word	0x20000190
 8000764:	40004400 	.word	0x40004400

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2010      	movs	r0, #16
 8000790:	f000 fb69 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f000 fb82 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2011      	movs	r0, #17
 80007a0:	f000 fb61 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007a4:	2011      	movs	r0, #17
 80007a6:	f000 fb7a 	bl	8000e9e <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_GPIO_Init+0xd4>)
 8000844:	f000 ffb4 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000860:	f000 fe22 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000864:	2320      	movs	r3, #32
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_GPIO_Init+0xd4>)
 800087c:	f000 fe14 	bl	80014a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020800 	.word	0x40020800

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 fab6 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a18      	ldr	r2, [pc, #96]	; (8000960 <HAL_TIM_Base_MspInit+0x70>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d10e      	bne.n	8000920 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_TIM_Base_MspInit+0x74>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <HAL_TIM_Base_MspInit+0x74>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_TIM_Base_MspInit+0x74>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800091e:	e01a      	b.n	8000956 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_TIM_Base_MspInit+0x78>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d115      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_TIM_Base_MspInit+0x74>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <HAL_TIM_Base_MspInit+0x74>)
 8000934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_TIM_Base_MspInit+0x74>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	201a      	movs	r0, #26
 800094c:	f000 fa8b 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000950:	201a      	movs	r0, #26
 8000952:	f000 faa4 	bl	8000e9e <HAL_NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40000400 	.word	0x40000400
 8000964:	40023800 	.word	0x40023800
 8000968:	40014800 	.word	0x40014800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a47      	ldr	r2, [pc, #284]	; (8000aa8 <HAL_UART_MspInit+0x13c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	f040 8088 	bne.w	8000aa0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	4b45      	ldr	r3, [pc, #276]	; (8000aac <HAL_UART_MspInit+0x140>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a44      	ldr	r2, [pc, #272]	; (8000aac <HAL_UART_MspInit+0x140>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b42      	ldr	r3, [pc, #264]	; (8000aac <HAL_UART_MspInit+0x140>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b3e      	ldr	r3, [pc, #248]	; (8000aac <HAL_UART_MspInit+0x140>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a3d      	ldr	r2, [pc, #244]	; (8000aac <HAL_UART_MspInit+0x140>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <HAL_UART_MspInit+0x140>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c8:	230c      	movs	r3, #12
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <HAL_UART_MspInit+0x144>)
 80009e4:	f000 fd60 	bl	80014a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 80009ea:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <HAL_UART_MspInit+0x14c>)
 80009ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 80009f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fc:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a28:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a2a:	f000 fa53 	bl	8000ed4 <HAL_DMA_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a34:	f7ff ff2e 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_UART_MspInit+0x148>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <HAL_UART_MspInit+0x154>)
 8000a48:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a50:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a54:	2240      	movs	r2, #64	; 0x40
 8000a56:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a64:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a86:	f000 fa25 	bl	8000ed4 <HAL_DMA_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000a90:	f7ff ff00 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_UART_MspInit+0x150>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	20000204 	.word	0x20000204
 8000ab8:	40026088 	.word	0x40026088
 8000abc:	20000264 	.word	0x20000264
 8000ac0:	400260a0 	.word	0x400260a0

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f8ae 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <DMA1_Stream5_IRQHandler+0x10>)
 8000b1e:	f000 fa87 	bl	8001030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000204 	.word	0x20000204

08000b2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <DMA1_Stream6_IRQHandler+0x10>)
 8000b32:	f000 fa7d 	bl	8001030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000264 	.word	0x20000264

08000b40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b46:	f001 fc0f 	bl	8002368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000dc 	.word	0x200000dc

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7e:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b94:	4c0b      	ldr	r4, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd7 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 fd7b 	bl	80036a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fc97 	bl	80004dc <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	08003740 	.word	0x08003740
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc4:	200002c8 	.word	0x200002c8

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f92b 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe4e 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f943 	bl	8000eba <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f90b 	bl	8000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200002c4 	.word	0x200002c4

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200002c4 	.word	0x200002c4

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff29 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff3e 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff8e 	bl	8000da4 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff31 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa2 	bl	8000e0c <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff feda 	bl	8000c98 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e099      	b.n	8001024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f10:	e00f      	b.n	8000f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f12:	f7ff fec1 	bl	8000c98 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d908      	bls.n	8000f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e078      	b.n	8001024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e8      	bne.n	8000f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <HAL_DMA_Init+0x158>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d107      	bne.n	8000f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4313      	orrs	r3, r2
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f023 0307 	bic.w	r3, r3, #7
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d117      	bne.n	8000ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00e      	beq.n	8000ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f9e9 	bl	80013b0 <DMA_CheckFifoParam>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2240      	movs	r2, #64	; 0x40
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e016      	b.n	8001024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f9a0 	bl	8001344 <DMA_CalcBaseAndBitshift>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100c:	223f      	movs	r2, #63	; 0x3f
 800100e:	409a      	lsls	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	f010803f 	.word	0xf010803f

08001030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800103c:	4b8e      	ldr	r3, [pc, #568]	; (8001278 <HAL_DMA_IRQHandler+0x248>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a8e      	ldr	r2, [pc, #568]	; (800127c <HAL_DMA_IRQHandler+0x24c>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0a9b      	lsrs	r3, r3, #10
 8001048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105a:	2208      	movs	r2, #8
 800105c:	409a      	lsls	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d01a      	beq.n	800109c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0204 	bic.w	r2, r2, #4
 8001082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	2208      	movs	r2, #8
 800108a:	409a      	lsls	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	2201      	movs	r2, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	2201      	movs	r2, #1
 80010c0:	409a      	lsls	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ca:	f043 0202 	orr.w	r2, r3, #2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d6:	2204      	movs	r2, #4
 80010d8:	409a      	lsls	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d012      	beq.n	8001108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	2204      	movs	r2, #4
 80010f6:	409a      	lsls	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001100:	f043 0204 	orr.w	r2, r3, #4
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110c:	2210      	movs	r2, #16
 800110e:	409a      	lsls	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d043      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d03c      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112a:	2210      	movs	r2, #16
 800112c:	409a      	lsls	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d018      	beq.n	8001172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d108      	bne.n	8001160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d024      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	4798      	blx	r3
 800115e:	e01f      	b.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01b      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
 8001170:	e016      	b.n	80011a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0208 	bic.w	r2, r2, #8
 800118e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	2220      	movs	r2, #32
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 808f 	beq.w	80012d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 8087 	beq.w	80012d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c6:	2220      	movs	r2, #32
 80011c8:	409a      	lsls	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d136      	bne.n	8001248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0216 	bic.w	r2, r2, #22
 80011e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695a      	ldr	r2, [r3, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <HAL_DMA_IRQHandler+0x1da>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0208 	bic.w	r2, r2, #8
 8001218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121e:	223f      	movs	r2, #63	; 0x3f
 8001220:	409a      	lsls	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123a:	2b00      	cmp	r3, #0
 800123c:	d07e      	beq.n	800133c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
        }
        return;
 8001246:	e079      	b.n	800133c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d01d      	beq.n	8001292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10d      	bne.n	8001280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	2b00      	cmp	r3, #0
 800126a:	d031      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	4798      	blx	r3
 8001274:	e02c      	b.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000
 800127c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001284:	2b00      	cmp	r3, #0
 8001286:	d023      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
 8001290:	e01e      	b.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10f      	bne.n	80012c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0210 	bic.w	r2, r2, #16
 80012ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d032      	beq.n	800133e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d022      	beq.n	800132a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2205      	movs	r2, #5
 80012e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	d307      	bcc.n	8001318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f2      	bne.n	80012fc <HAL_DMA_IRQHandler+0x2cc>
 8001316:	e000      	b.n	800131a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	4798      	blx	r3
 800133a:	e000      	b.n	800133e <HAL_DMA_IRQHandler+0x30e>
        return;
 800133c:	bf00      	nop
    }
  }
}
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3b10      	subs	r3, #16
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <DMA_CalcBaseAndBitshift+0x68>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d909      	bls.n	8001386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	1d1a      	adds	r2, r3, #4
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
 8001384:	e007      	b.n	8001396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800138e:	f023 0303 	bic.w	r3, r3, #3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	aaaaaaab 	.word	0xaaaaaaab
 80013ac:	08003728 	.word	0x08003728

080013b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11f      	bne.n	800140a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d856      	bhi.n	800147e <DMA_CheckFifoParam+0xce>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <DMA_CheckFifoParam+0x28>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	080013fb 	.word	0x080013fb
 80013e0:	080013e9 	.word	0x080013e9
 80013e4:	0800147f 	.word	0x0800147f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d046      	beq.n	8001482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013f8:	e043      	b.n	8001482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001402:	d140      	bne.n	8001486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001408:	e03d      	b.n	8001486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001412:	d121      	bne.n	8001458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d837      	bhi.n	800148a <DMA_CheckFifoParam+0xda>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <DMA_CheckFifoParam+0x70>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001431 	.word	0x08001431
 8001424:	08001437 	.word	0x08001437
 8001428:	08001431 	.word	0x08001431
 800142c:	08001449 	.word	0x08001449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
      break;
 8001434:	e030      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d025      	beq.n	800148e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001446:	e022      	b.n	800148e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001450:	d11f      	bne.n	8001492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001456:	e01c      	b.n	8001492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d903      	bls.n	8001466 <DMA_CheckFifoParam+0xb6>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d003      	beq.n	800146c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001464:	e018      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
      break;
 800146a:	e015      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00e      	beq.n	8001496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
      break;
 800147c:	e00b      	b.n	8001496 <DMA_CheckFifoParam+0xe6>
      break;
 800147e:	bf00      	nop
 8001480:	e00a      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      break;
 8001482:	bf00      	nop
 8001484:	e008      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      break;
 8001486:	bf00      	nop
 8001488:	e006      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      break;
 800148a:	bf00      	nop
 800148c:	e004      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      break;
 800148e:	bf00      	nop
 8001490:	e002      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      break;   
 8001492:	bf00      	nop
 8001494:	e000      	b.n	8001498 <DMA_CheckFifoParam+0xe8>
      break;
 8001496:	bf00      	nop
    }
  } 
  
  return status; 
 8001498:	7bfb      	ldrb	r3, [r7, #15]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e159      	b.n	8001778 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c4:	2201      	movs	r2, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	f040 8148 	bne.w	8001772 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d005      	beq.n	80014fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d130      	bne.n	800155c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 0201 	and.w	r2, r3, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b03      	cmp	r3, #3
 8001566:	d017      	beq.n	8001598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d123      	bne.n	80015ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0203 	and.w	r2, r3, #3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80a2 	beq.w	8001772 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b57      	ldr	r3, [pc, #348]	; (8001790 <HAL_GPIO_Init+0x2e8>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a56      	ldr	r2, [pc, #344]	; (8001790 <HAL_GPIO_Init+0x2e8>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b54      	ldr	r3, [pc, #336]	; (8001790 <HAL_GPIO_Init+0x2e8>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800164a:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_GPIO_Init+0x2ec>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a49      	ldr	r2, [pc, #292]	; (8001798 <HAL_GPIO_Init+0x2f0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x202>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_GPIO_Init+0x2f4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x1fe>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <HAL_GPIO_Init+0x2f8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x1fa>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <HAL_GPIO_Init+0x2fc>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x1f6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <HAL_GPIO_Init+0x300>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x1f2>
 8001696:	2304      	movs	r3, #4
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x204>
 800169a:	2307      	movs	r3, #7
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x204>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x204>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x204>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x204>
 80016aa:	2300      	movs	r3, #0
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f002 0203 	and.w	r2, r2, #3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	; (8001794 <HAL_GPIO_Init+0x2ec>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_GPIO_Init+0x304>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a2f      	ldr	r2, [pc, #188]	; (80017ac <HAL_GPIO_Init+0x304>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_GPIO_Init+0x304>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a24      	ldr	r2, [pc, #144]	; (80017ac <HAL_GPIO_Init+0x304>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_GPIO_Init+0x304>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001742:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <HAL_GPIO_Init+0x304>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_GPIO_Init+0x304>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_GPIO_Init+0x304>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	f67f aea2 	bls.w	80014c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40013800 	.word	0x40013800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
 80017bc:	4613      	mov	r3, r2
 80017be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c0:	787b      	ldrb	r3, [r7, #1]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017cc:	e003      	b.n	80017d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	041a      	lsls	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	619a      	str	r2, [r3, #24]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e267      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d075      	beq.n	80018ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001802:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d00c      	beq.n	8001828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180e:	4b85      	ldr	r3, [pc, #532]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001816:	2b08      	cmp	r3, #8
 8001818:	d112      	bne.n	8001840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181a:	4b82      	ldr	r3, [pc, #520]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001826:	d10b      	bne.n	8001840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	4b7e      	ldr	r3, [pc, #504]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d05b      	beq.n	80018ec <HAL_RCC_OscConfig+0x108>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d157      	bne.n	80018ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e242      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x74>
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0xb0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x98>
 8001862:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6f      	ldr	r2, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6c      	ldr	r2, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0xb0>
 800187c:	4b69      	ldr	r3, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a68      	ldr	r2, [pc, #416]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a65      	ldr	r2, [pc, #404]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff f9fc 	bl	8000c98 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff f9f8 	bl	8000c98 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e207      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0xc0>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f9e8 	bl	8000c98 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff f9e4 	bl	8000c98 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1f3      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	4b51      	ldr	r3, [pc, #324]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0xe8>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018fa:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800190e:	2b08      	cmp	r3, #8
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001912:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x152>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1c7      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <HAL_RCC_OscConfig+0x244>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f99d 	bl	8000c98 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f999 	bl	8000c98 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1a8      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4925      	ldr	r1, [pc, #148]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x244>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f97c 	bl	8000c98 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff f978 	bl	8000c98 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e187      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d036      	beq.n	8001a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d016      	beq.n	8001a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_RCC_OscConfig+0x248>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff f95c 	bl	8000c98 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff f958 	bl	8000c98 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e167      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x240>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x200>
 8001a02:	e01b      	b.n	8001a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_OscConfig+0x248>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f945 	bl	8000c98 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	e00e      	b.n	8001a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f941 	bl	8000c98 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d907      	bls.n	8001a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e150      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	42470000 	.word	0x42470000
 8001a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ea      	bne.n	8001a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8097 	beq.w	8001b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4e:	4b81      	ldr	r3, [pc, #516]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10f      	bne.n	8001a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a7c      	ldr	r2, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b7a      	ldr	r3, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b77      	ldr	r3, [pc, #476]	; (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a73      	ldr	r2, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f901 	bl	8000c98 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff f8fd 	bl	8000c98 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e10c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x2ea>
 8001ac0:	4b64      	ldr	r3, [pc, #400]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a63      	ldr	r2, [pc, #396]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x324>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x30c>
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a5b      	ldr	r2, [pc, #364]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0x324>
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	4b55      	ldr	r3, [pc, #340]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a54      	ldr	r2, [pc, #336]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d015      	beq.n	8001b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f8c2 	bl	8000c98 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff f8be 	bl	8000c98 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0cb      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0ee      	beq.n	8001b18 <HAL_RCC_OscConfig+0x334>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f8ac 	bl	8000c98 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f8a8 	bl	8000c98 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0b5      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ee      	bne.n	8001b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80a1 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d05c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d141      	bne.n	8001c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_OscConfig+0x478>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f87c 	bl	8000c98 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f878 	bl	8000c98 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e087      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	491b      	ldr	r1, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x478>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f851 	bl	8000c98 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f84d 	bl	8000c98 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e05c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x416>
 8001c18:	e054      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_OscConfig+0x478>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f83a 	bl	8000c98 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f836 	bl	8000c98 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e045      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x444>
 8001c46:	e03d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e038      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x4ec>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d028      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d121      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d11a      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d111      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0cc      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d90c      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0b8      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	494d      	ldr	r1, [pc, #308]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d044      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d119      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e07f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d92:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e067      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f023 0203 	bic.w	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4934      	ldr	r1, [pc, #208]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc4:	f7fe ff68 	bl	8000c98 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dcc:	f7fe ff64 	bl	8000c98 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e04f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 020c 	and.w	r2, r3, #12
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1eb      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d20c      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e032      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4916      	ldr	r1, [pc, #88]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e5a:	f000 f821 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	490a      	ldr	r1, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	5ccb      	ldrb	r3, [r1, r3]
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fec8 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08003710 	.word	0x08003710
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea4:	b094      	sub	sp, #80	; 0x50
 8001ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8001eac:	2300      	movs	r3, #0
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb8:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	f200 80e1 	bhi.w	800208c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x3a>
 8001ed2:	e0db      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ed6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ed8:	e0db      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ede:	e0d8      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef6:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	2200      	movs	r2, #0
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f12:	4622      	mov	r2, r4
 8001f14:	462b      	mov	r3, r5
 8001f16:	f04f 0000 	mov.w	r0, #0
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	0159      	lsls	r1, r3, #5
 8001f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f24:	0150      	lsls	r0, r2, #5
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	1a51      	subs	r1, r2, r1
 8001f2e:	6139      	str	r1, [r7, #16]
 8001f30:	4629      	mov	r1, r5
 8001f32:	eb63 0301 	sbc.w	r3, r3, r1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f44:	4659      	mov	r1, fp
 8001f46:	018b      	lsls	r3, r1, #6
 8001f48:	4651      	mov	r1, sl
 8001f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4e:	4651      	mov	r1, sl
 8001f50:	018a      	lsls	r2, r1, #6
 8001f52:	4651      	mov	r1, sl
 8001f54:	ebb2 0801 	subs.w	r8, r2, r1
 8001f58:	4659      	mov	r1, fp
 8001f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f72:	4690      	mov	r8, r2
 8001f74:	4699      	mov	r9, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	eb18 0303 	adds.w	r3, r8, r3
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	462b      	mov	r3, r5
 8001f80:	eb49 0303 	adc.w	r3, r9, r3
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f92:	4629      	mov	r1, r5
 8001f94:	024b      	lsls	r3, r1, #9
 8001f96:	4621      	mov	r1, r4
 8001f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	024a      	lsls	r2, r1, #9
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fb0:	f7fe f912 	bl	80001d8 <__aeabi_uldivmod>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fbc:	e058      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4611      	mov	r1, r2
 8001fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fd8:	4642      	mov	r2, r8
 8001fda:	464b      	mov	r3, r9
 8001fdc:	f04f 0000 	mov.w	r0, #0
 8001fe0:	f04f 0100 	mov.w	r1, #0
 8001fe4:	0159      	lsls	r1, r3, #5
 8001fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fea:	0150      	lsls	r0, r2, #5
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800200c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002010:	ebb2 040a 	subs.w	r4, r2, sl
 8002014:	eb63 050b 	sbc.w	r5, r3, fp
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	00eb      	lsls	r3, r5, #3
 8002022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002026:	00e2      	lsls	r2, r4, #3
 8002028:	4614      	mov	r4, r2
 800202a:	461d      	mov	r5, r3
 800202c:	4643      	mov	r3, r8
 800202e:	18e3      	adds	r3, r4, r3
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	464b      	mov	r3, r9
 8002034:	eb45 0303 	adc.w	r3, r5, r3
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002046:	4629      	mov	r1, r5
 8002048:	028b      	lsls	r3, r1, #10
 800204a:	4621      	mov	r1, r4
 800204c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002050:	4621      	mov	r1, r4
 8002052:	028a      	lsls	r2, r1, #10
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205a:	2200      	movs	r2, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	61fa      	str	r2, [r7, #28]
 8002060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002064:	f7fe f8b8 	bl	80001d8 <__aeabi_uldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4613      	mov	r3, r2
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	3301      	adds	r3, #1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208a:	e002      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800208e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002094:	4618      	mov	r0, r3
 8002096:	3750      	adds	r7, #80	; 0x50
 8002098:	46bd      	mov	sp, r7
 800209a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	00f42400 	.word	0x00f42400
 80020a8:	007a1200 	.word	0x007a1200

080020ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000

080020c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020c8:	f7ff fff0 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	0a9b      	lsrs	r3, r3, #10
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4903      	ldr	r1, [pc, #12]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40023800 	.word	0x40023800
 80020e8:	08003720 	.word	0x08003720

080020ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020f0:	f7ff ffdc 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0b5b      	lsrs	r3, r3, #13
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4903      	ldr	r1, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	08003720 	.word	0x08003720

08002114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e04c      	b.n	80021c0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fe6a 	bl	8002e14 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_TIM_Base_Init+0xb4>)
 800214c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f000 fbad 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	080008f1 	.word	0x080008f1

080021cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e04c      	b.n	8002278 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d111      	bne.n	800220e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fe0e 	bl	8002e14 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_TIM_OC_Init+0xb4>)
 8002204:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f000 fb51 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	08002285 	.word	0x08002285

08002284 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e04c      	b.n	8002346 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d111      	bne.n	80022dc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fda7 	bl	8002e14 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_TIM_OnePulse_Init+0xb8>)
 80022d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f000 faea 	bl	80028c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0208 	bic.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	08002355 	.word	0x08002355

08002354 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	d128      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b02      	cmp	r3, #2
 800238a:	d121      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0202 	mvn.w	r2, #2
 8002394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
 80023b4:	e009      	b.n	80023ca <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d128      	bne.n	8002430 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d121      	bne.n	8002430 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0204 	mvn.w	r2, #4
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e009      	b.n	800242a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b08      	cmp	r3, #8
 800243c:	d128      	bne.n	8002490 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d121      	bne.n	8002490 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0208 	mvn.w	r2, #8
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
 8002474:	e009      	b.n	800248a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b10      	cmp	r3, #16
 800249c:	d128      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d121      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0210 	mvn.w	r2, #16
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2208      	movs	r2, #8
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e009      	b.n	80024ea <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d110      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d109      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0201 	mvn.w	r2, #1
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d110      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d109      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d110      	bne.n	8002580 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d109      	bne.n	8002580 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d110      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	d109      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0220 	mvn.w	r2, #32
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e048      	b.n	8002668 <HAL_TIM_OC_ConfigChannel+0xb0>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	d839      	bhi.n	8002658 <HAL_TIM_OC_ConfigChannel+0xa0>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002621 	.word	0x08002621
 80025f0:	08002659 	.word	0x08002659
 80025f4:	08002659 	.word	0x08002659
 80025f8:	08002659 	.word	0x08002659
 80025fc:	0800262f 	.word	0x0800262f
 8002600:	08002659 	.word	0x08002659
 8002604:	08002659 	.word	0x08002659
 8002608:	08002659 	.word	0x08002659
 800260c:	0800263d 	.word	0x0800263d
 8002610:	08002659 	.word	0x08002659
 8002614:	08002659 	.word	0x08002659
 8002618:	08002659 	.word	0x08002659
 800261c:	0800264b 	.word	0x0800264b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f9ce 	bl	80029c8 <TIM_OC1_SetConfig>
      break;
 800262c:	e017      	b.n	800265e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fa2d 	bl	8002a94 <TIM_OC2_SetConfig>
      break;
 800263a:	e010      	b.n	800265e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fa92 	bl	8002b6c <TIM_OC3_SetConfig>
      break;
 8002648:	e009      	b.n	800265e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 faf5 	bl	8002c40 <TIM_OC4_SetConfig>
      break;
 8002656:	e002      	b.n	800265e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	75fb      	strb	r3, [r7, #23]
      break;
 800265c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_TIM_ConfigClockSource+0x1c>
 8002688:	2302      	movs	r3, #2
 800268a:	e0b4      	b.n	80027f6 <HAL_TIM_ConfigClockSource+0x186>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c4:	d03e      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0xd4>
 80026c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ca:	f200 8087 	bhi.w	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	f000 8086 	beq.w	80027e2 <HAL_TIM_ConfigClockSource+0x172>
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	d87f      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 80026dc:	2b70      	cmp	r3, #112	; 0x70
 80026de:	d01a      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0xa6>
 80026e0:	2b70      	cmp	r3, #112	; 0x70
 80026e2:	d87b      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b60      	cmp	r3, #96	; 0x60
 80026e6:	d050      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x11a>
 80026e8:	2b60      	cmp	r3, #96	; 0x60
 80026ea:	d877      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 80026ec:	2b50      	cmp	r3, #80	; 0x50
 80026ee:	d03c      	beq.n	800276a <HAL_TIM_ConfigClockSource+0xfa>
 80026f0:	2b50      	cmp	r3, #80	; 0x50
 80026f2:	d873      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b40      	cmp	r3, #64	; 0x40
 80026f6:	d058      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x13a>
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d86f      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 80026fc:	2b30      	cmp	r3, #48	; 0x30
 80026fe:	d064      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x15a>
 8002700:	2b30      	cmp	r3, #48	; 0x30
 8002702:	d86b      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b20      	cmp	r3, #32
 8002706:	d060      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x15a>
 8002708:	2b20      	cmp	r3, #32
 800270a:	d867      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b00      	cmp	r3, #0
 800270e:	d05c      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x15a>
 8002710:	2b10      	cmp	r3, #16
 8002712:	d05a      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x15a>
 8002714:	e062      	b.n	80027dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f000 fb55 	bl	8002dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	609a      	str	r2, [r3, #8]
      break;
 8002742:	e04f      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f000 fb3e 	bl	8002dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002766:	609a      	str	r2, [r3, #8]
      break;
 8002768:	e03c      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	461a      	mov	r2, r3
 8002778:	f000 fab2 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2150      	movs	r1, #80	; 0x50
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fb0b 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 8002788:	e02c      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	461a      	mov	r2, r3
 8002798:	f000 fad1 	bl	8002d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2160      	movs	r1, #96	; 0x60
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fafb 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 80027a8:	e01c      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f000 fa92 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 faeb 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 80027c8:	e00c      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f000 fae2 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 80027da:	e003      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e000      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a34      	ldr	r2, [pc, #208]	; (80029ac <TIM_Base_SetConfig+0xe4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00f      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <TIM_Base_SetConfig+0xe8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <TIM_Base_SetConfig+0xec>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <TIM_Base_SetConfig+0xf0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d108      	bne.n	8002912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a25      	ldr	r2, [pc, #148]	; (80029ac <TIM_Base_SetConfig+0xe4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01b      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d017      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <TIM_Base_SetConfig+0xe8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <TIM_Base_SetConfig+0xec>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00f      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <TIM_Base_SetConfig+0xf0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <TIM_Base_SetConfig+0xf4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <TIM_Base_SetConfig+0xf8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <TIM_Base_SetConfig+0xfc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <TIM_Base_SetConfig+0xe4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	615a      	str	r2, [r3, #20]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800
 80029b8:	40000c00 	.word	0x40000c00
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800

080029c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 0302 	bic.w	r3, r3, #2
 8002a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <TIM_OC1_SetConfig+0xc8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10c      	bne.n	8002a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f023 0308 	bic.w	r3, r3, #8
 8002a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <TIM_OC1_SetConfig+0xc8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d111      	bne.n	8002a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	621a      	str	r2, [r3, #32]
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40010000 	.word	0x40010000

08002a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0210 	bic.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0320 	bic.w	r3, r3, #32
 8002ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <TIM_OC2_SetConfig+0xd4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10d      	bne.n	8002b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <TIM_OC2_SetConfig+0xd4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d113      	bne.n	8002b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40010000 	.word	0x40010000

08002b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <TIM_OC3_SetConfig+0xd0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10d      	bne.n	8002be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <TIM_OC3_SetConfig+0xd0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	621a      	str	r2, [r3, #32]
}
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40010000 	.word	0x40010000

08002c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	031b      	lsls	r3, r3, #12
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <TIM_OC4_SetConfig+0x9c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	621a      	str	r2, [r3, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000

08002ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 030a 	bic.w	r3, r3, #10
 8002d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b087      	sub	sp, #28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f023 0210 	bic.w	r2, r3, #16
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	031b      	lsls	r3, r3, #12
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	621a      	str	r2, [r3, #32]
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f043 0307 	orr.w	r3, r3, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	021a      	lsls	r2, r3, #8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <TIM_ResetCallback+0x7c>)
 8002e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <TIM_ResetCallback+0x80>)
 8002e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <TIM_ResetCallback+0x84>)
 8002e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <TIM_ResetCallback+0x88>)
 8002e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <TIM_ResetCallback+0x8c>)
 8002e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <TIM_ResetCallback+0x90>)
 8002e48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <TIM_ResetCallback+0x94>)
 8002e50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <TIM_ResetCallback+0x98>)
 8002e58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <TIM_ResetCallback+0x9c>)
 8002e60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <TIM_ResetCallback+0xa0>)
 8002e68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <TIM_ResetCallback+0xa4>)
 8002e70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <TIM_ResetCallback+0xa8>)
 8002e78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <TIM_ResetCallback+0xac>)
 8002e80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	080027ff 	.word	0x080027ff
 8002e94:	08002813 	.word	0x08002813
 8002e98:	0800288b 	.word	0x0800288b
 8002e9c:	0800289f 	.word	0x0800289f
 8002ea0:	0800283b 	.word	0x0800283b
 8002ea4:	0800284f 	.word	0x0800284f
 8002ea8:	08002827 	.word	0x08002827
 8002eac:	08002863 	.word	0x08002863
 8002eb0:	08002877 	.word	0x08002877
 8002eb4:	080028b3 	.word	0x080028b3
 8002eb8:	08002fa1 	.word	0x08002fa1
 8002ebc:	08002fb5 	.word	0x08002fb5
 8002ec0:	08002fc9 	.word	0x08002fc9

08002ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e050      	b.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d013      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10c      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40014000 	.word	0x40014000

08002fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e04a      	b.n	8003084 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d111      	bne.n	800301e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8a0 	bl	8003148 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1e      	ldr	r2, [pc, #120]	; (800308c <HAL_UART_Init+0xb0>)
 8003014:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2224      	movs	r2, #36	; 0x24
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003034:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8be 	bl	80031b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800304a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800305a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800306a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	0800096d 	.word	0x0800096d

08003090 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <UART_InitCallbacksToDefault+0x4c>)
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <UART_InitCallbacksToDefault+0x50>)
 800315a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0f      	ldr	r2, [pc, #60]	; (800319c <UART_InitCallbacksToDefault+0x54>)
 8003160:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <UART_InitCallbacksToDefault+0x58>)
 8003166:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <UART_InitCallbacksToDefault+0x5c>)
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <UART_InitCallbacksToDefault+0x60>)
 8003172:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <UART_InitCallbacksToDefault+0x64>)
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <UART_InitCallbacksToDefault+0x68>)
 800317e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <UART_InitCallbacksToDefault+0x6c>)
 8003184:	669a      	str	r2, [r3, #104]	; 0x68

}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	080030a5 	.word	0x080030a5
 8003198:	08003091 	.word	0x08003091
 800319c:	080030cd 	.word	0x080030cd
 80031a0:	080030b9 	.word	0x080030b9
 80031a4:	080030e1 	.word	0x080030e1
 80031a8:	080030f5 	.word	0x080030f5
 80031ac:	08003109 	.word	0x08003109
 80031b0:	0800311d 	.word	0x0800311d
 80031b4:	08003131 	.word	0x08003131

080031b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031bc:	b0c0      	sub	sp, #256	; 0x100
 80031be:	af00      	add	r7, sp, #0
 80031c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	68d9      	ldr	r1, [r3, #12]
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	ea40 0301 	orr.w	r3, r0, r1
 80031e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003210:	f021 010c 	bic.w	r1, r1, #12
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800321e:	430b      	orrs	r3, r1
 8003220:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	6999      	ldr	r1, [r3, #24]
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	ea40 0301 	orr.w	r3, r0, r1
 800323e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <UART_SetConfig+0x2cc>)
 8003248:	429a      	cmp	r2, r3
 800324a:	d005      	beq.n	8003258 <UART_SetConfig+0xa0>
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b8d      	ldr	r3, [pc, #564]	; (8003488 <UART_SetConfig+0x2d0>)
 8003254:	429a      	cmp	r2, r3
 8003256:	d104      	bne.n	8003262 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003258:	f7fe ff48 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 800325c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003260:	e003      	b.n	800326a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003262:	f7fe ff2f 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 8003266:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003274:	f040 810c 	bne.w	8003490 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327c:	2200      	movs	r2, #0
 800327e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003282:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003286:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800328a:	4622      	mov	r2, r4
 800328c:	462b      	mov	r3, r5
 800328e:	1891      	adds	r1, r2, r2
 8003290:	65b9      	str	r1, [r7, #88]	; 0x58
 8003292:	415b      	adcs	r3, r3
 8003294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800329a:	4621      	mov	r1, r4
 800329c:	eb12 0801 	adds.w	r8, r2, r1
 80032a0:	4629      	mov	r1, r5
 80032a2:	eb43 0901 	adc.w	r9, r3, r1
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ba:	4690      	mov	r8, r2
 80032bc:	4699      	mov	r9, r3
 80032be:	4623      	mov	r3, r4
 80032c0:	eb18 0303 	adds.w	r3, r8, r3
 80032c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032c8:	462b      	mov	r3, r5
 80032ca:	eb49 0303 	adc.w	r3, r9, r3
 80032ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032e6:	460b      	mov	r3, r1
 80032e8:	18db      	adds	r3, r3, r3
 80032ea:	653b      	str	r3, [r7, #80]	; 0x50
 80032ec:	4613      	mov	r3, r2
 80032ee:	eb42 0303 	adc.w	r3, r2, r3
 80032f2:	657b      	str	r3, [r7, #84]	; 0x54
 80032f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032fc:	f7fc ff6c 	bl	80001d8 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4b61      	ldr	r3, [pc, #388]	; (800348c <UART_SetConfig+0x2d4>)
 8003306:	fba3 2302 	umull	r2, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	011c      	lsls	r4, r3, #4
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003318:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800331c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	1891      	adds	r1, r2, r2
 8003326:	64b9      	str	r1, [r7, #72]	; 0x48
 8003328:	415b      	adcs	r3, r3
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003330:	4641      	mov	r1, r8
 8003332:	eb12 0a01 	adds.w	sl, r2, r1
 8003336:	4649      	mov	r1, r9
 8003338:	eb43 0b01 	adc.w	fp, r3, r1
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003348:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800334c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003350:	4692      	mov	sl, r2
 8003352:	469b      	mov	fp, r3
 8003354:	4643      	mov	r3, r8
 8003356:	eb1a 0303 	adds.w	r3, sl, r3
 800335a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800335e:	464b      	mov	r3, r9
 8003360:	eb4b 0303 	adc.w	r3, fp, r3
 8003364:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003374:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003378:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800337c:	460b      	mov	r3, r1
 800337e:	18db      	adds	r3, r3, r3
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
 8003382:	4613      	mov	r3, r2
 8003384:	eb42 0303 	adc.w	r3, r2, r3
 8003388:	647b      	str	r3, [r7, #68]	; 0x44
 800338a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800338e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003392:	f7fc ff21 	bl	80001d8 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4611      	mov	r1, r2
 800339c:	4b3b      	ldr	r3, [pc, #236]	; (800348c <UART_SetConfig+0x2d4>)
 800339e:	fba3 2301 	umull	r2, r3, r3, r1
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2264      	movs	r2, #100	; 0x64
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	1acb      	subs	r3, r1, r3
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033b2:	4b36      	ldr	r3, [pc, #216]	; (800348c <UART_SetConfig+0x2d4>)
 80033b4:	fba3 2302 	umull	r2, r3, r3, r2
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033c0:	441c      	add	r4, r3
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	63b9      	str	r1, [r7, #56]	; 0x38
 80033dc:	415b      	adcs	r3, r3
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033e4:	4641      	mov	r1, r8
 80033e6:	1851      	adds	r1, r2, r1
 80033e8:	6339      	str	r1, [r7, #48]	; 0x30
 80033ea:	4649      	mov	r1, r9
 80033ec:	414b      	adcs	r3, r1
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033fc:	4659      	mov	r1, fp
 80033fe:	00cb      	lsls	r3, r1, #3
 8003400:	4651      	mov	r1, sl
 8003402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003406:	4651      	mov	r1, sl
 8003408:	00ca      	lsls	r2, r1, #3
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	4603      	mov	r3, r0
 8003410:	4642      	mov	r2, r8
 8003412:	189b      	adds	r3, r3, r2
 8003414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003418:	464b      	mov	r3, r9
 800341a:	460a      	mov	r2, r1
 800341c:	eb42 0303 	adc.w	r3, r2, r3
 8003420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003430:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003438:	460b      	mov	r3, r1
 800343a:	18db      	adds	r3, r3, r3
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
 800343e:	4613      	mov	r3, r2
 8003440:	eb42 0303 	adc.w	r3, r2, r3
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800344a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800344e:	f7fc fec3 	bl	80001d8 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <UART_SetConfig+0x2d4>)
 8003458:	fba3 1302 	umull	r1, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	2164      	movs	r1, #100	; 0x64
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	3332      	adds	r3, #50	; 0x32
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <UART_SetConfig+0x2d4>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	f003 0207 	and.w	r2, r3, #7
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4422      	add	r2, r4
 800347e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003480:	e105      	b.n	800368e <UART_SetConfig+0x4d6>
 8003482:	bf00      	nop
 8003484:	40011000 	.word	0x40011000
 8003488:	40011400 	.word	0x40011400
 800348c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800349a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800349e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034a2:	4642      	mov	r2, r8
 80034a4:	464b      	mov	r3, r9
 80034a6:	1891      	adds	r1, r2, r2
 80034a8:	6239      	str	r1, [r7, #32]
 80034aa:	415b      	adcs	r3, r3
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034b2:	4641      	mov	r1, r8
 80034b4:	1854      	adds	r4, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb43 0501 	adc.w	r5, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	00eb      	lsls	r3, r5, #3
 80034c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ca:	00e2      	lsls	r2, r4, #3
 80034cc:	4614      	mov	r4, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	4643      	mov	r3, r8
 80034d2:	18e3      	adds	r3, r4, r3
 80034d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034d8:	464b      	mov	r3, r9
 80034da:	eb45 0303 	adc.w	r3, r5, r3
 80034de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034fe:	4629      	mov	r1, r5
 8003500:	008b      	lsls	r3, r1, #2
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003508:	4621      	mov	r1, r4
 800350a:	008a      	lsls	r2, r1, #2
 800350c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003510:	f7fc fe62 	bl	80001d8 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4b60      	ldr	r3, [pc, #384]	; (800369c <UART_SetConfig+0x4e4>)
 800351a:	fba3 2302 	umull	r2, r3, r3, r2
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	011c      	lsls	r4, r3, #4
 8003522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800352c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003530:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003534:	4642      	mov	r2, r8
 8003536:	464b      	mov	r3, r9
 8003538:	1891      	adds	r1, r2, r2
 800353a:	61b9      	str	r1, [r7, #24]
 800353c:	415b      	adcs	r3, r3
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003544:	4641      	mov	r1, r8
 8003546:	1851      	adds	r1, r2, r1
 8003548:	6139      	str	r1, [r7, #16]
 800354a:	4649      	mov	r1, r9
 800354c:	414b      	adcs	r3, r1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800355c:	4659      	mov	r1, fp
 800355e:	00cb      	lsls	r3, r1, #3
 8003560:	4651      	mov	r1, sl
 8003562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003566:	4651      	mov	r1, sl
 8003568:	00ca      	lsls	r2, r1, #3
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	4603      	mov	r3, r0
 8003570:	4642      	mov	r2, r8
 8003572:	189b      	adds	r3, r3, r2
 8003574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003578:	464b      	mov	r3, r9
 800357a:	460a      	mov	r2, r1
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	67bb      	str	r3, [r7, #120]	; 0x78
 800358e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800359c:	4649      	mov	r1, r9
 800359e:	008b      	lsls	r3, r1, #2
 80035a0:	4641      	mov	r1, r8
 80035a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a6:	4641      	mov	r1, r8
 80035a8:	008a      	lsls	r2, r1, #2
 80035aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ae:	f7fc fe13 	bl	80001d8 <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4b39      	ldr	r3, [pc, #228]	; (800369c <UART_SetConfig+0x4e4>)
 80035b8:	fba3 1302 	umull	r1, r3, r3, r2
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	2164      	movs	r1, #100	; 0x64
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	3332      	adds	r3, #50	; 0x32
 80035ca:	4a34      	ldr	r2, [pc, #208]	; (800369c <UART_SetConfig+0x4e4>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d6:	441c      	add	r4, r3
 80035d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035dc:	2200      	movs	r2, #0
 80035de:	673b      	str	r3, [r7, #112]	; 0x70
 80035e0:	677a      	str	r2, [r7, #116]	; 0x74
 80035e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035e6:	4642      	mov	r2, r8
 80035e8:	464b      	mov	r3, r9
 80035ea:	1891      	adds	r1, r2, r2
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	415b      	adcs	r3, r3
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f6:	4641      	mov	r1, r8
 80035f8:	1851      	adds	r1, r2, r1
 80035fa:	6039      	str	r1, [r7, #0]
 80035fc:	4649      	mov	r1, r9
 80035fe:	414b      	adcs	r3, r1
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800360e:	4659      	mov	r1, fp
 8003610:	00cb      	lsls	r3, r1, #3
 8003612:	4651      	mov	r1, sl
 8003614:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003618:	4651      	mov	r1, sl
 800361a:	00ca      	lsls	r2, r1, #3
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	4603      	mov	r3, r0
 8003622:	4642      	mov	r2, r8
 8003624:	189b      	adds	r3, r3, r2
 8003626:	66bb      	str	r3, [r7, #104]	; 0x68
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	663b      	str	r3, [r7, #96]	; 0x60
 800363c:	667a      	str	r2, [r7, #100]	; 0x64
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800364a:	4649      	mov	r1, r9
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	4641      	mov	r1, r8
 8003650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003654:	4641      	mov	r1, r8
 8003656:	008a      	lsls	r2, r1, #2
 8003658:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800365c:	f7fc fdbc 	bl	80001d8 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b0d      	ldr	r3, [pc, #52]	; (800369c <UART_SetConfig+0x4e4>)
 8003666:	fba3 1302 	umull	r1, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2164      	movs	r1, #100	; 0x64
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	3332      	adds	r3, #50	; 0x32
 8003678:	4a08      	ldr	r2, [pc, #32]	; (800369c <UART_SetConfig+0x4e4>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4422      	add	r2, r4
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	51eb851f 	.word	0x51eb851f

080036a0 <__libc_init_array>:
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	4d0d      	ldr	r5, [pc, #52]	; (80036d8 <__libc_init_array+0x38>)
 80036a4:	4c0d      	ldr	r4, [pc, #52]	; (80036dc <__libc_init_array+0x3c>)
 80036a6:	1b64      	subs	r4, r4, r5
 80036a8:	10a4      	asrs	r4, r4, #2
 80036aa:	2600      	movs	r6, #0
 80036ac:	42a6      	cmp	r6, r4
 80036ae:	d109      	bne.n	80036c4 <__libc_init_array+0x24>
 80036b0:	4d0b      	ldr	r5, [pc, #44]	; (80036e0 <__libc_init_array+0x40>)
 80036b2:	4c0c      	ldr	r4, [pc, #48]	; (80036e4 <__libc_init_array+0x44>)
 80036b4:	f000 f820 	bl	80036f8 <_init>
 80036b8:	1b64      	subs	r4, r4, r5
 80036ba:	10a4      	asrs	r4, r4, #2
 80036bc:	2600      	movs	r6, #0
 80036be:	42a6      	cmp	r6, r4
 80036c0:	d105      	bne.n	80036ce <__libc_init_array+0x2e>
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c8:	4798      	blx	r3
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7ee      	b.n	80036ac <__libc_init_array+0xc>
 80036ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d2:	4798      	blx	r3
 80036d4:	3601      	adds	r6, #1
 80036d6:	e7f2      	b.n	80036be <__libc_init_array+0x1e>
 80036d8:	08003738 	.word	0x08003738
 80036dc:	08003738 	.word	0x08003738
 80036e0:	08003738 	.word	0x08003738
 80036e4:	0800373c 	.word	0x0800373c

080036e8 <memset>:
 80036e8:	4402      	add	r2, r0
 80036ea:	4603      	mov	r3, r0
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d100      	bne.n	80036f2 <memset+0xa>
 80036f0:	4770      	bx	lr
 80036f2:	f803 1b01 	strb.w	r1, [r3], #1
 80036f6:	e7f9      	b.n	80036ec <memset+0x4>

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
